---
# This playbook will install PostgreSQL Server
#
# postgres package installation 
#

# unless you have a good reason not to, switch selinux off
# if you keep this on you will likely have to fix ssh auth
# between barman and postgres

  - name: Switch SELinux Off
    selinux:
      state: disabled

  - name: Install PostgreSQL Server packages
    yum:  
      name: "{{ packages }}"
      state: present
    vars:
      packages:
      - postgresql{{ pg_ver }}-server
      - postgresql{{ pg_ver }}-contrib
      - postgresql{{ pg_ver }}-libs
      - postgresql{{ pg_ver }}
    tags: ['core_pg_packages','all_packages']


# install extensions
  - name: Install Extensions and Additional Packages
    yum:
      name: "{{ packages }}"
      state: present
    vars:
      packages:
      - python-psycopg2 
    tags: ['additional_packages','all_packages']

# postgres will create this user anyway but ensure it exists and generate ssh keys

  - name: Add PostgreSQL User, generate SSH keys
    user:
      name: postgres
      group: postgres
      home: "{{ postgres_home }}"
      state: present
      generate_ssh_key: yes
    tags: ['user_profile']

# get the file system structure correct
  - name: Ensure mount points exist
    command: mountpoint -q {{ item }}
    register: volume_stat
    failed_when: False
    changed_when: False
    with_items:
    - "{{ data_mount }}" 
    - "{{ temp_mount }}"  
    - "{{ log_mount }}"
    tags: ['fs_validation']

  - name: Ensure directories exists
    file:
      path: "{{ item }}" 
      state: directory
      owner: "{{ postgres_owner }}" 
      group: "{{ postgres_owner }}" 
      mode: 0755
    with_items:
      - "{{ data_dir }}"
      - "{{ temp_dir }}"
      - "{{ log_dir }}"
    tags: ['fs_validation']

#
# configure postgres user profile
#
  - name: Copy base .pgsql_profile
    template:
      src=templates/pgsql_profile.j2
      dest="{{ postgres_home }}/.pgsql_profile"
      owner="{{ postgres_owner }}"
      group="{{ postgres_owner }}"
      mode=644
      backup=yes
    tags: ['user_profile']

  - name: Check if SSH keys exist
    stat:
      path="{{ postgres_home }}/.ssh/id_rsa"
    register: ssh_exist

  - name: Generate PostgreSQL SSH Keys
    become_user: "{{ postgres_owner }}" 
    shell: "ssh-keygen -t rsa -f {{ postgres_home }}/.ssh/id_rsa -q -P ''"
    register: ssh_test
    when: ssh_exist.stat.exists == False
    tags: ['user_profile']

  - name: Ensure SSH keys set
    file:
      path: "{{ item }}"
      state: touch 
      owner: "{{ postgres_owner }}" 
      group: "{{ postgres_owner }}" 
      mode: 0600
    with_items:
      - "{{ postgres_home }}/.ssh/id_rsa"
      - "{{ postgres_home }}/.ssh/authorized_keys"
    tags: ['user_profile']

#
# Configure Firewall 
#

  - name: Configure firewalld
    firewalld:
      port={{ pg_port }}/tcp
      permanent=true
      state=enabled
      immediate=yes
    notify:  
      - Restart Firewalld
    tags: ['configure_instance']

#
# Configure PostgreSQL Instance
#

  - name: Override Service Script
    template:
      src=templates/postgresql.service.j2
      dest=/etc/systemd/system/postgresql-{{ pg_ver }}.service
      owner=root
      group=root
      mode=0644
    tags: ['configure_instance']
